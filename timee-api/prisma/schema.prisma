generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 房间表 - 存储活动基本信息
model Room {
  id          String    @id @default(uuid()) @db.Uuid
  shareId     String    @unique @map("share_id") @db.VarChar(12)     // 分享链接ID (nanoid)
  tcCode      String    @unique @map("tc_code") @db.VarChar(6)       // T-Code 6位数字口令
  title       String?   @map("title") @db.VarChar(255)
  description String?   @map("description") @db.Text
  timezone    String    @default("UTC") @map("timezone") @db.VarChar(100)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // 关联关系
  candidateSlots CandidateSlot[]
  participants   Participant[]
  selectedSlots  SelectedSlot[]

  @@map("rooms")
}

// 候选时间段表 - 房间创建者定义的可选时间段
model CandidateSlot {
  id        String   @id @default(uuid()) @db.Uuid
  roomId    String   @map("room_id") @db.Uuid
  startTime DateTime @map("start_time") @db.Timestamptz(6)           // UTC时间
  endTime   DateTime @map("end_time") @db.Timestamptz(6)             // UTC时间
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // 关联关系
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // 约束：同一房间内不能有重叠的时间段
  @@unique([roomId, startTime])
  @@map("candidate_slots")
}

// 参与者表 - 存储参与者基本信息
model Participant {
  id        String   @id @default(uuid()) @db.Uuid
  roomId    String   @map("room_id") @db.Uuid
  name      String   @map("name") @db.VarChar(255)
  email     String?  @map("email") @db.VarChar(255)
  initials  String?  @map("initials") @db.VarChar(10)
  timezone  String   @default("UTC") @map("timezone") @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // 关联关系
  room          Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  selectedSlots SelectedSlot[]

  // 约束：同一房间中用户名唯一
  @@unique([roomId, name])
  @@map("participants")
}

// 选中时间段表 - 参与者选择的可用时间段
model SelectedSlot {
  id            String   @id @default(uuid()) @db.Uuid
  roomId        String   @map("room_id") @db.Uuid
  participantId String   @map("participant_id") @db.Uuid
  startTime     DateTime @map("start_time") @db.Timestamptz(6)       // UTC时间
  endTime       DateTime @map("end_time") @db.Timestamptz(6)         // UTC时间
  isAvailable   Boolean  @default(true) @map("is_available")         // true=可用, false=不可用
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // 关联关系
  room        Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  // 约束：防止竞态条件，同一参与者同一时间段只能有一条记录
  @@unique([participantId, startTime])
  @@map("selected_slots")
}



// 保留原有的点赞功能（与新架构无关）
model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.VarChar(255)
  target    String   @default("testimonials") @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([userId, target])
  @@map("likes")
}

model LikeStats {
  id        String   @id @default(uuid()) @db.Uuid
  target    String   @unique @default("testimonials") @db.VarChar(100)
  count     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("like_stats")
} 
