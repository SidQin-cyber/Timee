generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id             String    @id
  title          String
  description    String?
  timezone       String    @default("UTC+8")
  startDate      DateTime  @map("start_date") @db.Date
  endDate        DateTime  @map("end_date") @db.Date
  startTime      String    @default("09:00") @map("start_time")
  endTime        String    @default("17:00") @map("end_time")
  eventType      EventType @default(GROUP) @map("event_type")
  includeTime    Boolean   @default(false) @map("include_time")
  selectedDates  String?   @map("selected_dates")
  finalizedSlots String[]  @map("finalized_slots")
  createdBy      String?   @map("created_by")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  responses EventResponse[]

  @@map("events")
}

model EventResponse {
  id               String    @id @default(cuid())
  eventId          String    @map("event_id")
  participantName  String    @map("participant_name")
  participantEmail String?   @map("participant_email")
  userInitials     String    @map("user_initials")
  paintMode        PaintMode @default(AVAILABLE) @map("paint_mode")
  timezone         String    @default("UTC+8")
  availableSlots   Json      @default("[]") @map("available_slots")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantName])
  @@map("event_responses")
}

enum EventType {
  GROUP      @map("group")
  ONE_ON_ONE @map("one-on-one")
}

enum PaintMode {
  AVAILABLE   @map("available")
  UNAVAILABLE @map("unavailable")
}
